// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sentence.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sentence_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sentence_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sentence_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sentence_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace chrome_lang_id {
class Sentence;
class SentenceDefaultTypeInternal;
extern SentenceDefaultTypeInternal _Sentence_default_instance_;
class Token;
class TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace chrome_lang_id
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_lang_id::Sentence* Arena::CreateMaybeMessage<::chrome_lang_id::Sentence>(Arena*);
template<> ::chrome_lang_id::Token* Arena::CreateMaybeMessage<::chrome_lang_id::Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_lang_id {

enum Token_BreakLevel : int {
  Token_BreakLevel_NO_BREAK = 0,
  Token_BreakLevel_SPACE_BREAK = 1,
  Token_BreakLevel_LINE_BREAK = 2,
  Token_BreakLevel_SENTENCE_BREAK = 3
};
bool Token_BreakLevel_IsValid(int value);
constexpr Token_BreakLevel Token_BreakLevel_BreakLevel_MIN = Token_BreakLevel_NO_BREAK;
constexpr Token_BreakLevel Token_BreakLevel_BreakLevel_MAX = Token_BreakLevel_SENTENCE_BREAK;
constexpr int Token_BreakLevel_BreakLevel_ARRAYSIZE = Token_BreakLevel_BreakLevel_MAX + 1;

const std::string& Token_BreakLevel_Name(Token_BreakLevel value);
template<typename T>
inline const std::string& Token_BreakLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Token_BreakLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Token_BreakLevel_Name.");
  return Token_BreakLevel_Name(static_cast<Token_BreakLevel>(enum_t_value));
}
bool Token_BreakLevel_Parse(
    const std::string& name, Token_BreakLevel* value);
// ===================================================================

class Sentence :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.Sentence) */ {
 public:
  Sentence();
  virtual ~Sentence();

  Sentence(const Sentence& from);
  Sentence(Sentence&& from) noexcept
    : Sentence() {
    *this = ::std::move(from);
  }

  inline Sentence& operator=(const Sentence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sentence& operator=(Sentence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Sentence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sentence* internal_default_instance() {
    return reinterpret_cast<const Sentence*>(
               &_Sentence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sentence& a, Sentence& b) {
    a.Swap(&b);
  }
  inline void Swap(Sentence* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sentence* New() const final {
    return CreateMaybeMessage<Sentence>(nullptr);
  }

  Sentence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sentence>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Sentence& from);
  void MergeFrom(const Sentence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Sentence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_lang_id.Sentence";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kIdFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // repeated .chrome_lang_id.Token token = 3;
  int token_size() const;
  private:
  int _internal_token_size() const;
  public:
  void clear_token();
  ::chrome_lang_id::Token* mutable_token(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_lang_id::Token >*
      mutable_token();
  private:
  const ::chrome_lang_id::Token& _internal_token(int index) const;
  ::chrome_lang_id::Token* _internal_add_token();
  public:
  const ::chrome_lang_id::Token& token(int index) const;
  ::chrome_lang_id::Token* add_token();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_lang_id::Token >&
      token() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Sentence)
  // @@protoc_insertion_point(class_scope:chrome_lang_id.Sentence)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_lang_id::Token > token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  friend struct ::TableStruct_sentence_2eproto;
};
// -------------------------------------------------------------------

class Token :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.Token) */ {
 public:
  Token();
  virtual ~Token();

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Token& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Token* New() const final {
    return CreateMaybeMessage<Token>(nullptr);
  }

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Token* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_lang_id.Token";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Token_BreakLevel BreakLevel;
  static constexpr BreakLevel NO_BREAK =
    Token_BreakLevel_NO_BREAK;
  static constexpr BreakLevel SPACE_BREAK =
    Token_BreakLevel_SPACE_BREAK;
  static constexpr BreakLevel LINE_BREAK =
    Token_BreakLevel_LINE_BREAK;
  static constexpr BreakLevel SENTENCE_BREAK =
    Token_BreakLevel_SENTENCE_BREAK;
  static inline bool BreakLevel_IsValid(int value) {
    return Token_BreakLevel_IsValid(value);
  }
  static constexpr BreakLevel BreakLevel_MIN =
    Token_BreakLevel_BreakLevel_MIN;
  static constexpr BreakLevel BreakLevel_MAX =
    Token_BreakLevel_BreakLevel_MAX;
  static constexpr int BreakLevel_ARRAYSIZE =
    Token_BreakLevel_BreakLevel_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BreakLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BreakLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BreakLevel_Name.");
    return Token_BreakLevel_Name(enum_t_value);
  }
  static inline bool BreakLevel_Parse(const std::string& name,
      BreakLevel* value) {
    return Token_BreakLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kTagFieldNumber = 5,
    kCategoryFieldNumber = 6,
    kLabelFieldNumber = 7,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kHeadFieldNumber = 4,
    kBreakLevelFieldNumber = 8,
  };
  // required string word = 1;
  bool has_word() const;
  private:
  bool _internal_has_word() const;
  public:
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // optional string tag = 5;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // optional string category = 6;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // optional string label = 7;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // required int32 start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 head = 4 [default = -1];
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  ::PROTOBUF_NAMESPACE_ID::int32 head() const;
  void set_head(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_head() const;
  void _internal_set_head(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .chrome_lang_id.Token.BreakLevel break_level = 8 [default = SPACE_BREAK];
  bool has_break_level() const;
  private:
  bool _internal_has_break_level() const;
  public:
  void clear_break_level();
  ::chrome_lang_id::Token_BreakLevel break_level() const;
  void set_break_level(::chrome_lang_id::Token_BreakLevel value);
  private:
  ::chrome_lang_id::Token_BreakLevel _internal_break_level() const;
  void _internal_set_break_level(::chrome_lang_id::Token_BreakLevel value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Token)
  // @@protoc_insertion_point(class_scope:chrome_lang_id.Token)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  ::PROTOBUF_NAMESPACE_ID::int32 head_;
  int break_level_;
  friend struct ::TableStruct_sentence_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sentence

// optional string id = 1;
inline bool Sentence::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sentence::has_id() const {
  return _internal_has_id();
}
inline void Sentence::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Sentence::id() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Sentence.id)
  return _internal_id();
}
inline void Sentence::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.Sentence.id)
}
inline std::string* Sentence::mutable_id() {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.Sentence.id)
  return _internal_mutable_id();
}
inline const std::string& Sentence::_internal_id() const {
  return id_.GetNoArena();
}
inline void Sentence::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Sentence::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.Sentence.id)
}
inline void Sentence::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.Sentence.id)
}
inline void Sentence::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.Sentence.id)
}
inline std::string* Sentence::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sentence::release_id() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.Sentence.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sentence::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.Sentence.id)
}

// optional string text = 2;
inline bool Sentence::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Sentence::has_text() const {
  return _internal_has_text();
}
inline void Sentence::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Sentence::text() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Sentence.text)
  return _internal_text();
}
inline void Sentence::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.Sentence.text)
}
inline std::string* Sentence::mutable_text() {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.Sentence.text)
  return _internal_mutable_text();
}
inline const std::string& Sentence::_internal_text() const {
  return text_.GetNoArena();
}
inline void Sentence::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Sentence::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.Sentence.text)
}
inline void Sentence::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.Sentence.text)
}
inline void Sentence::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.Sentence.text)
}
inline std::string* Sentence::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000002u;
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sentence::release_text() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.Sentence.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sentence::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.Sentence.text)
}

// repeated .chrome_lang_id.Token token = 3;
inline int Sentence::_internal_token_size() const {
  return token_.size();
}
inline int Sentence::token_size() const {
  return _internal_token_size();
}
inline void Sentence::clear_token() {
  token_.Clear();
}
inline ::chrome_lang_id::Token* Sentence::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.Sentence.token)
  return token_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_lang_id::Token >*
Sentence::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.Sentence.token)
  return &token_;
}
inline const ::chrome_lang_id::Token& Sentence::_internal_token(int index) const {
  return token_.Get(index);
}
inline const ::chrome_lang_id::Token& Sentence::token(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Sentence.token)
  return _internal_token(index);
}
inline ::chrome_lang_id::Token* Sentence::_internal_add_token() {
  return token_.Add();
}
inline ::chrome_lang_id::Token* Sentence::add_token() {
  // @@protoc_insertion_point(field_add:chrome_lang_id.Sentence.token)
  return _internal_add_token();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_lang_id::Token >&
Sentence::token() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.Sentence.token)
  return token_;
}

// -------------------------------------------------------------------

// Token

// required string word = 1;
inline bool Token::_internal_has_word() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Token::has_word() const {
  return _internal_has_word();
}
inline void Token::clear_word() {
  word_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Token::word() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Token.word)
  return _internal_word();
}
inline void Token::set_word(const std::string& value) {
  _internal_set_word(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.Token.word)
}
inline std::string* Token::mutable_word() {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.Token.word)
  return _internal_mutable_word();
}
inline const std::string& Token::_internal_word() const {
  return word_.GetNoArena();
}
inline void Token::_internal_set_word(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Token::set_word(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.Token.word)
}
inline void Token::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.Token.word)
}
inline void Token::set_word(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.Token.word)
}
inline std::string* Token::_internal_mutable_word() {
  _has_bits_[0] |= 0x00000001u;
  return word_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Token::release_word() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.Token.word)
  if (!_internal_has_word()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return word_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  word_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.Token.word)
}

// required int32 start = 2;
inline bool Token::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Token::has_start() const {
  return _internal_has_start();
}
inline void Token::clear_start() {
  start_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::start() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Token.start)
  return _internal_start();
}
inline void Token::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  start_ = value;
}
inline void Token::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.Token.start)
}

// required int32 end = 3;
inline bool Token::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Token::has_end() const {
  return _internal_has_end();
}
inline void Token::clear_end() {
  end_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::end() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Token.end)
  return _internal_end();
}
inline void Token::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  end_ = value;
}
inline void Token::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.Token.end)
}

// optional int32 head = 4 [default = -1];
inline bool Token::_internal_has_head() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Token::has_head() const {
  return _internal_has_head();
}
inline void Token::clear_head() {
  head_ = -1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::_internal_head() const {
  return head_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::head() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Token.head)
  return _internal_head();
}
inline void Token::_internal_set_head(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  head_ = value;
}
inline void Token::set_head(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_head(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.Token.head)
}

// optional string tag = 5;
inline bool Token::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Token::has_tag() const {
  return _internal_has_tag();
}
inline void Token::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Token::tag() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Token.tag)
  return _internal_tag();
}
inline void Token::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.Token.tag)
}
inline std::string* Token::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.Token.tag)
  return _internal_mutable_tag();
}
inline const std::string& Token::_internal_tag() const {
  return tag_.GetNoArena();
}
inline void Token::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Token::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.Token.tag)
}
inline void Token::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.Token.tag)
}
inline void Token::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.Token.tag)
}
inline std::string* Token::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000002u;
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Token::release_tag() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.Token.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.Token.tag)
}

// optional string category = 6;
inline bool Token::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Token::has_category() const {
  return _internal_has_category();
}
inline void Token::clear_category() {
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Token::category() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Token.category)
  return _internal_category();
}
inline void Token::set_category(const std::string& value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.Token.category)
}
inline std::string* Token::mutable_category() {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.Token.category)
  return _internal_mutable_category();
}
inline const std::string& Token::_internal_category() const {
  return category_.GetNoArena();
}
inline void Token::_internal_set_category(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Token::set_category(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  category_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.Token.category)
}
inline void Token::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.Token.category)
}
inline void Token::set_category(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.Token.category)
}
inline std::string* Token::_internal_mutable_category() {
  _has_bits_[0] |= 0x00000004u;
  return category_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Token::release_category() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.Token.category)
  if (!_internal_has_category()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return category_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  category_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.Token.category)
}

// optional string label = 7;
inline bool Token::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Token::has_label() const {
  return _internal_has_label();
}
inline void Token::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Token::label() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Token.label)
  return _internal_label();
}
inline void Token::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.Token.label)
}
inline std::string* Token::mutable_label() {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.Token.label)
  return _internal_mutable_label();
}
inline const std::string& Token::_internal_label() const {
  return label_.GetNoArena();
}
inline void Token::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Token::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.Token.label)
}
inline void Token::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.Token.label)
}
inline void Token::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.Token.label)
}
inline std::string* Token::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000008u;
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Token::release_label() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.Token.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.Token.label)
}

// optional .chrome_lang_id.Token.BreakLevel break_level = 8 [default = SPACE_BREAK];
inline bool Token::_internal_has_break_level() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Token::has_break_level() const {
  return _internal_has_break_level();
}
inline void Token::clear_break_level() {
  break_level_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::chrome_lang_id::Token_BreakLevel Token::_internal_break_level() const {
  return static_cast< ::chrome_lang_id::Token_BreakLevel >(break_level_);
}
inline ::chrome_lang_id::Token_BreakLevel Token::break_level() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Token.break_level)
  return _internal_break_level();
}
inline void Token::_internal_set_break_level(::chrome_lang_id::Token_BreakLevel value) {
  assert(::chrome_lang_id::Token_BreakLevel_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  break_level_ = value;
}
inline void Token::set_break_level(::chrome_lang_id::Token_BreakLevel value) {
  _internal_set_break_level(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.Token.break_level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_lang_id

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chrome_lang_id::Token_BreakLevel> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sentence_2eproto
